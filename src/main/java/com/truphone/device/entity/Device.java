package com.truphone.device.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Builder;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;
import java.sql.Timestamp;

@Data
@Entity
@DynamicUpdate
/**
 * You can use GenerationType.AUTO, GenerationType.IDENTITY, GenerationType.SEQUENCE (There is also TABLE, which simulates Sequence but I have have not used it before
 * AUTO lets Hibernate select the Generation type based on the database, IDENTITY requires Hibernate to query the ID after it is generated by the Database
 * SEQUENCE is generally used as it uses the Database's Sequence, if No specific Sequence is given using @SequenceGenerator then the default sequence of the
 * database will be used.
 *
 * In this class we use AUTO Id generator of the H2 database. The device name being not-null and createdAt and updatedAt Timestamp is managed by JPA automatically
 * with the relevant annotations given below for them.
 *
 * DynamicUpdate annotation makes sure that the update is done only on fields that has got changed.
 *
 * Testing - Unit testing is written only to test the functionality and not classes, so unit testing is out of scope for entity classes for this exercise.
 *
 */
public class Device {
    /**
     * BeanUtils.copyProperties require a default constructor.
     */
    public Device() {}

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)

    private Long id;
    @Column(nullable = false)
    @NotBlank(message = "device is required.",groups = OnCreate.class)
    private String name;

    @Column(nullable = false)
    @NotBlank(message = "brand is required.", groups = OnCreate.class)
    private String brand;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private Timestamp createdAt;
    @UpdateTimestamp
    @JsonIgnore
    @Column(name = "updated_at")
    private Timestamp updatedAt;
}
